require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const GROUP_CHAT_ID = process.env.GROUP_CHAT_ID; // ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userState = {};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"
const mainMenu = {
  reply_markup: {
    keyboard: [[{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è" }]],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞
const citizenshipKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§ üá∑üá∫" }],
      [{ text: "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω üåç" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ñ–æ—Ä–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
const statusKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç" }],
      [{ text: "–ë—ã–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (—É–≤–æ–ª–∏–ª—Å—è < –º–µ—Å—è—Ü)" }],
      [{ text: "–ë—ã–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (—É–≤–æ–ª–∏–ª—Å—è > –º–µ—Å—è—Ü)" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

const employmentKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å" }],
      [{ text: "–ì–ü–•" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserMention(msg) {
  return msg.from.username ? `@${msg.from.username}` : `id${msg.from.id}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞
async function askForCitizenship(chatId) {
  userState[chatId].step = 'WAITING_CITIZENSHIP';
  await bot.sendMessage(chatId, '–ö–∞–∫–æ–µ —É —Ç–µ–±—è –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?', citizenshipKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞
async function askForCity(chatId) {
  userState[chatId].step = 'WAITING_CITY';
  await bot.sendMessage(chatId, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?', mainMenu);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start|–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è/, (msg) => {
  const chatId = msg.chat.id;

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userState[chatId] = { step: "START", data: {} };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
  bot.sendMessage(
    chatId,
    "üö¥üèº‚Äç‚ôÇÔ∏è –ö–æ–º–ø–∞–Ω–∏—è –°–∞–º–æ–∫–∞—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\n" +
      "–£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n" +
      "1Ô∏è‚É£ _–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫_ ‚Äì –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏–ª–∏ –ø–µ—à–∫–æ–º.\n" +
      "2Ô∏è‚É£ _–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤_ ‚Äì –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤—ã–¥–∞—á–∏.\n\n" +
      "–ê–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é! üòä",
    {
      reply_markup: {
        keyboard: [
          [{ text: "–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫ üö¥‚Äç‚ôÇÔ∏è" }, { text: "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤ üõí" }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
      parse_mode: "Markdown",
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!userState[chatId]) {
    userState[chatId] = { step: "START", data: {} };
  }

  const state = userState[chatId];

  switch (state.step) {
    case "START":
      if (text === "–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫ üö¥‚Äç‚ôÇÔ∏è") {
        // –ü—É—Ç—å –∫—É—Ä—å–µ—Ä–∞
        bot.sendMessage(
          chatId,
          "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é *–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫*.\n\n" +
            "–î–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏–ª–∏ –ø–µ—à–∫–æ–º. –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.\n\n" +
            "–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏?",
          {
            reply_markup: {
              keyboard: [
                [{ text: "–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏!" }, { text: "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç" }],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        state.step = "CONSENT_COURIER";
      } else if (text === "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤ üõí") {
        // –ü—É—Ç—å —Å–±–æ—Ä—â–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        bot.sendMessage(
          chatId,
          "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é *–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤*.\n\n" +
            "–ö–æ–º–ø–ª–µ–∫—Ç—É–π—Ç–µ –∑–∞–∫–∞–∑—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –≤—ã–¥–∞—á–∏. –†–∞–±–æ—Ç–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞.\n\n" +
            "–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å —Å–±–æ—Ä—â–∏–∫–æ–º –∑–∞–∫–∞–∑–æ–≤?",
          {
            reply_markup: {
              keyboard: [
                [{ text: "–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —Å–±–æ—Ä—â–∏–∫–æ–º –∑–∞–∫–∞–∑–æ–≤!" }, { text: "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç" }],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        state.step = "CONSENT_COLLECTION";
      }
      break;

    case "CONSENT_COURIER":
      if (text === "–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏!") {
        bot.sendMessage(chatId, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.", mainMenu);
        state.data.vacancy = "–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫";
        state.step = "WAITING_NAME";
      } else if (text === "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç") {
        bot.sendMessage(chatId, "–ñ–∞–ª—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", mainMenu);
        state.step = "ZERO";
      }
      break;

    case "CONSENT_COLLECTION":
      if (text === "–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —Å–±–æ—Ä—â–∏–∫–æ–º –∑–∞–∫–∞–∑–æ–≤!") {
        bot.sendMessage(chatId, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.", mainMenu);
        state.data.vacancy = "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤";
        state.step = "WAITING_NAME";
      } else if (text === "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç") {
        bot.sendMessage(chatId, "–ñ–∞–ª—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", mainMenu);
        state.step = "ZERO";
      }
      break;

    case "WAITING_NAME":
      state.data.name = text;
      bot.sendMessage(chatId, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", mainMenu);
      state.step = "WAITING_AGE";
      break;

    case "WAITING_AGE":
      const age = parseInt(text, 10);
      if (isNaN(age)) {
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.", mainMenu);
      } else if (age < 18) {
        bot.sendMessage(
          chatId,
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å 18 –ª–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
          mainMenu
        );
        state.step = "START";
      } else {
        state.data.age = age;
        askForCitizenship(chatId);
      }
      break;

    case "WAITING_CITIZENSHIP":
      state.data.citizenship = text;
      askForCity(chatId);
      break;

    case "WAITING_CITY":
      state.data.city = text;
      if (state.data.vacancy === "–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫") {
        bot.sendMessage(
          chatId,
          "–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ?",
          {
            reply_markup: {
              keyboard: [[{ text: "–î–∞" }, { text: "–ù–µ—Ç" }]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        state.step = "WAITING_BIKE";
      } else {
        bot.sendMessage(chatId, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ò–ù–ù?", mainMenu);
        state.step = "WAITING_INN";
      }
      break;

    case "WAITING_BIKE":
      state.data.bike = text;
      if (text === "–î–∞") {
        bot.sendMessage(
          chatId,
          "–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–¥–Ω—è—Ç—å —Ç—è–∂–µ–ª—ã–π –∑–∞–∫–∞–∑ (15-20 –∫–≥)?",
          {
            reply_markup: {
              keyboard: [[{ text: "–°–ø—Ä–∞–≤–ª—é—Å—å" }, { text: "–ù–µ –¥—É–º–∞—é" }]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        state.step = "WAITING_WEIGHT";
      } else {
        bot.sendMessage(
          chatId,
          "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—à–∏–º –∫—É—Ä—å–µ—Ä–æ–º?",
          {
            reply_markup: {
              keyboard: [[{ text: "–ü—Ä–æ–¥–æ–ª–∂–∏–º" }, { text: "–ù–µ –¥—É–º–∞—é" }]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        state.step = "WAITING_WALK_COURIER";
      }
      break;

    case "WAITING_WEIGHT":
      state.data.weight = text;
      if (text === "–ù–µ –¥—É–º–∞—é") {
        bot.sendMessage(
          chatId,
          "–¢–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã —Ä–µ–¥–∫–∏. –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É.",
          mainMenu
        );
        state.step = "START";
      } else {
        bot.sendMessage(chatId, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ò–ù–ù?", mainMenu);
        state.step = "WAITING_INN";
      }
      break;

    case "WAITING_WALK_COURIER":
      state.data.walkCourier = text;
      if (text === "–ù–µ –¥—É–º–∞—é") {
        bot.sendMessage(
          chatId,
          "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ.",
          mainMenu
        );
        state.step = "START";
      } else {
        bot.sendMessage(
          chatId,
          "–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–¥–Ω—è—Ç—å —Ç—è–∂–µ–ª—ã–π –∑–∞–∫–∞–∑ (15-20 –∫–≥)?",
          {
            reply_markup: {
              keyboard: [[{ text: "–°–ø—Ä–∞–≤–ª—é—Å—å" }, { text: "–ù–µ –¥—É–º–∞—é" }]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        state.step = "WAITING_WEIGHT";
      }
      break;

    case "WAITING_INN":
      state.data.inn = text;
      bot.sendMessage(
        chatId,
        "–° –∫–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å?\n" +
          "1Ô∏è‚É£ –ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç\n" +
          "2Ô∏è‚É£ –ë—ã–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (—É–≤–æ–ª–∏–ª—Å—è –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥)\n" +
          "3Ô∏è‚É£ –ë—ã–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (—É–≤–æ–ª–∏–ª—Å—è –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥)",
        statusKeyboard
      );
      state.step = "WAITING_STATUS";
      break;

    case "WAITING_STATUS":
      if (
        text === "–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç" ||
        text === "–ë—ã–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (—É–≤–æ–ª–∏–ª—Å—è < –º–µ—Å—è—Ü)" ||
        text === "–ë—ã–≤—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (—É–≤–æ–ª–∏–ª—Å—è > –º–µ—Å—è—Ü)"
      ) {
        state.data.status = text;
        bot.sendMessage(
          chatId,
          "–í –∫–∞–∫–æ–π —Ç—Ä—É–¥–æ–≤–æ–π —Ñ–æ—Ä–º–µ —É–¥–æ–±–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –∫–æ–º–ø–∞–Ω–∏–µ–π –°–∞–º–æ–∫–∞—Ç?\n" +
            "1Ô∏è‚É£ –°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å\n" +
            "2Ô∏è‚É£ –ì–ü–•",
          employmentKeyboard
        );
        state.step = "WAITING_EMPLOYMENT";
      } else {
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", statusKeyboard);
      }
      break;

    case "WAITING_EMPLOYMENT":
      if (text === "–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å" || text === "–ì–ü–•") {
        state.data.employment = text;
        bot.sendMessage(chatId, "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", mainMenu);
        state.step = "WAITING_PHONE";
      } else {
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", employmentKeyboard);
      }
      break;

    case "WAITING_PHONE":
      state.data.phone = text;

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
      const userInfo = `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
-------------------
–í–∞–∫–∞–Ω—Å–∏—è: ${state.data.vacancy || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
–ò–º—è: ${state.data.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–í–æ–∑—Ä–∞—Å—Ç: ${state.data.age || "–ù–µ —É–∫–∞–∑–∞–Ω"}
–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: ${state.data.citizenship || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–ì–æ—Ä–æ–¥: ${state.data.city || "–ù–µ —É–∫–∞–∑–∞–Ω"}
–£–º–µ–Ω–∏–µ –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ: ${state.data.bike || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–¥–Ω–∏–º–∞—Ç—å —Ç—è–∂–µ—Å—Ç–∏: ${state.data.weight || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
–ò–ù–ù: ${state.data.inn || "–ù–µ —É–∫–∞–∑–∞–Ω"}
–°—Ç–∞—Ç—É—Å: ${state.data.status || "–ù–µ —É–∫–∞–∑–∞–Ω"}
–§–æ—Ä–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: ${state.data.employment || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
–¢–µ–ª–µ—Ñ–æ–Ω: ${state.data.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${getUserMention(msg)}
      `;
      bot.sendMessage(GROUP_CHAT_ID, userInfo);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.sendMessage(
        chatId,
        "–°–ø–∞—Å–∏–±–æ! HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        mainMenu
      );

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
      state.step = "START";
      break;

    case "ZERO":
      bot.sendMessage(chatId, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", mainMenu);
      state.step = "START";
      break;

    default:
      bot.sendMessage(chatId, "–û—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", mainMenu);
      state.step = "START";
      break;
  }
});
