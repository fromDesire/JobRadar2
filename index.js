require("dotenv").config();

const TelegramBot = require("node-telegram-bot-api");

const BOT_TOKEN = process.env.BOT_TOKEN; // –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN
const GROUP_CHAT_ID_TWO = process.env.GROUP_CHAT_ID_TWO; // –£–∫–∞–∂–∏—Ç–µ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

const bot = new TelegramBot(BOT_TOKEN, { polling: true }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

const userState = {};

const mainMenu = {
  reply_markup: {
    keyboard: [[{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è" }]],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

function getUserMention(msg) {
  return msg.from.username ? `@${msg.from.username}` : `@id${msg.from.id}`;
}

bot.onText(/\/start|–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚Ü©Ô∏è/, (msg) => {
  const chatId = msg.chat.id;
  userState[chatId] = { step: "/start", data: {} };

    bot.sendMessage(
      chatId,
      "üö¥üèº‚Äç‚ôÇÔ∏è –ö–æ–º–ø–∞–Ω–∏—è –°–∞–º–æ–∫–∞—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\n" +
      "–£ –Ω–∞—Å –µ—Å—Ç—å –¥–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n" +
      "1Ô∏è‚É£ *–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫* ‚Äì –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏–ª–∏ –ø–µ—à–∫–æ–º.\n" +
      "2Ô∏è‚É£ *–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤* ‚Äì –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤—ã–¥–∞—á–∏.\n\n" +
      "–ê–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é! üòä",
      {
        reply_markup: {
          keyboard: [[{ text: "–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫" }, { text: "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤" }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
        parse_mode: "Markdown",
      }
    );
});

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userMention = getUserMention(msg);

  if (!userState[chatId]) {
    userState[chatId] = { step: "/start", data: {} };
  }

  const state = userState[chatId];

  switch (state.step) {
    case "/start":
      if (text === "–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫") {
        bot.sendMessage(chatId, "–¢–µ–∫—Å—Ç –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫—É—Ä—å–µ—Ä–∞", mainMenu);
        state.step = "askName";
      } else if (text === "–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤") {
        bot.sendMessage(chatId, "–¢–µ–∫—Å—Ç –æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–±–æ—Ä—â–∏–∫–∞", mainMenu);
        state.step = "askCity";
      }
      break;

    case "askCity":
      state.data.city = text;
      bot.sendMessage(chatId, "–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", { reply_markup: { force_reply: true } });
      state.step = "askPhone";
      break;

    case "askPhone":
      state.data.phone = text;
      const userInfo = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: ${state.data.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n–ì–æ—Ä–æ–¥: ${state.data.city || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${state.data.phone}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userMention}`;
      bot.sendMessage(GROUP_CHAT_ID_TWO, userInfo);
      bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏." , mainMenu);
      state.step = "/start";
      break;

    default:
      bot.sendMessage(chatId, "–û—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", mainMenu);
      state.step = "/start";
      break;
  }
});
